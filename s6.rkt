#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 70 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 1867 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"pit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"snake"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 2 #" ("
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 14 3 4 #"segs"
0 0 24 3 1 #" "
0 0 14 3 5 #"eaten"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 17 3 44 #";eaten \303\251 o contador de goos comidos (*****)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"goo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 6 #"expire"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMX"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMY"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"TICK-RATE"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"SIZE"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"SEG-SIZE"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"MAX-GOO"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"EXPIRATION-TIME"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"WIDTH-PX"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"SEG-SIZE"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMX"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"HEIGHT-PX"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"SEG-SIZE"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMY"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 24 3 1 #" "
0 0 14 3 17 #"ENDGAME-TEXT-SIZE"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"MT-SCENE"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 8 #"WIDTH-PX"
0 0 24 3 1 #" "
0 0 14 3 9 #"HEIGHT-PX"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"GOO-IMG"
0 0 24 3 1 #" "
0 2          13 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 277
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0 \0\0\0 \b"
 #"\6\0\0\0szz\364\0\0\0\334IDATX\205c\374\377\377\377\177\6"
 #"$\260\355\271\0342\227\301K\362\21\3"
 #">\240\274\311\27\205\177\327o3^\371\311\246\27Q\370LxM\247\3\30u\0"
 #"#z\32@\a\204\342\30\35\240\247\241"
 #"\334\323\372x\365\17x\b\214:\200q"
 #"\3533Y\2244\200\236\357\321\323\0\251\200P\232\31\360\20\30u\0F9@("
 #"\316\313\265o\241\360;\257\252\221$?"
 #"Z\27\f:\a\220\\\27\240\203\4\345"
 #"\217(\374\5w\371Q\370\243\345\300\240w\0\243\322F\37\2244p\320e.\212"
 #"\202K\37MP\370\350\365;\251`\264"
 #"=0\350\34\300\202\36\347\366{\222Q\370\a]\316\240iA\225G/\333\t\365"
 #"#\320\333\214\3\36\2\243\16\300h\23"
 #"j\361\355CQ\340\274\267\20\205O(\316I\355+\16x\b\214:"
 #"\0\0_7U\205\255bK\242\0\0\0\0IEND\256B`\202"
) 0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"SEG-IMG"
0 0 24 3 1 #" "
0 2          13 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 175
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0 \0\0\0 \b"
 #"\6\0\0\0szz\364\0\0\0vIDATX\205\355\227\321\t\3000\b"
 #"D\275\222!:]\207\353t\331\302\376_@)I\260\320\273\317\b\307\303\2501"
 #"pw\267@\0\242p\252\304\336\216)"
 #"\367\5\22@\343\203\364\316\357\36\307\257"
 #"3\364\343\232(\317\200\0`fq\243"
 #"nVy\6\0040\314\201\241\317\251\257"
 #"\337\316\201\314\257<\3\2\20\200\0\364"
 #"\26\b\240\361\216\266z'di'\374\34\0\3647\374=\300\3"
 #"\6m#9X\210\226\30\0\0\0\0IEND\256B`\202"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"HEAD-IMG"
0 0 24 3 1 #" "
0 2          13 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 217
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0 \0\0\0 \b"
 #"\6\0\0\0szz\364\0\0\0\240IDATX\205c\374\377\377\377\177\6"
 #"<\200\221\221\21\2374\305\200\211\246\246"
 #"\217:\200\b\300\202.\200\36\347\5\223"
 #"\366\241\3605\335u\360\32\370l\331T\24~cc#\n\37=\311\rx\b\214"
 #":\200\205\3228\277\276\363\n\n\177\2"
 #"Z\234\243\233\207n\337\200\207\300\250\3"
 #"0\312\1t\200\36\307\244\202\t\2Zx\345\a<\4F\0350\352\200Q\a\20"
 #",\aH\255\v\320A\301\207k(\374\th\362\3\36\2\243\16`D\357\27P"
 #"\275}\220\347\204\302\37m\23\16:\a`\244\1\f\5\243}\303\341\356"
 #"\0\0\274`/L \2d\240\0\0\0\0IEND\256B`\202"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"HEAD-LEFT-IMG"
0 0 24 3 1 #" "
0 0 14 3 8 #"HEAD-IMG"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"HEAD-DOWN-IMG"
0 0 24 3 2 #" ("
0 0 14 3 6 #"rotate"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 14 3 13 #"HEAD-LEFT-IMG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"HEAD-RIGHT-IMG"
0 0 24 3 2 #" ("
0 0 14 3 15 #"flip-horizontal"
0 0 24 3 1 #" "
0 0 14 3 13 #"HEAD-LEFT-IMG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"HEAD-UP-IMG"
0 0 24 3 2 #" ("
0 0 14 3 13 #"flip-vertical"
0 0 24 3 1 #" "
0 0 14 3 13 #"HEAD-DOWN-IMG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; funcao can-eat determina se a snake pode comer algum goo, retornan"
 #"do #f"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; se nao for possivel, caso contrario retorna o goo que ela pode com"
 #"er"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; usa a funcao close, e eh recursivo"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(define (can-eat snake goos)"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";   (define lst (filter (lambda (x) (close? (snake-head snake) x)) g"
 #"oos))"
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #";   (if (empty? lst) #f (car lst)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"can-eat"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 17 3 69
(
 #";        [else (if (close? (snake-head snake) (goo-loc (first goos))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"close?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #")]"
0 0 17 3 42 #";retorna o primeiro goo de goos e finaliza"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"can-eat"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 5 #"))]))"
0 0 17 3 59
#";testa recursivamente se a snake pode comer a cauda de goos"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";a snake s esta perto do goo g se est\303\243o na mesma posicao"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"close?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 17 3 35
#"; s \303\251 a posi\303\247\303\243o da cabe\303\247a snake"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 1 #"g"
0 0 17 3 1 #" "
0 0 17 3 2 #"\303\251"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 7 #"posicao"
0 0 17 3 7 #" do goo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"posn=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 7 #"goo-loc"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")))"
0 0 17 3 51 #";retorna ser a snake s tem mesma posicao se o goo g"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; funcao next-pit retorna um novo mundo a partir do mundo w"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"next-pit"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pit-snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 17 3 50 #"; primeiro ela separa a snake e os goos do mundo w"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pit-goos"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 16 #"))              "
0 0 17 3 64
(
 #"; depois faz goo-to-eat ser uma"
 #" lista onde o elemento da cabe\303\247a"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"goo-to-eat"
0 0 24 3 2 #" ("
0 0 14 3 7 #"can-eat"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #"))"
0 0 17 3 60
#"; eh o goo que a snake come, caso contrario a lista eh vazia"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"goo-to-eat"
0 0 24 3 1 #" "
0 0 17 3 37 #"; se a lista goo-to-eat nao for vazia"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"pit"
0 0 24 3 2 #" ("
0 0 14 3 4 #"grow"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #") ("
0 0 14 3 7 #"age-goo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eat"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #" "
0 0 14 3 10 #"goo-to-eat"
0 0 24 3 4 #"))) "
0 0 17 3 51 #"; se verdadeiro, crescer a snake, retornado o mundo"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"pit"
0 0 24 3 2 #" ("
0 0 14 3 7 #"slither"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #") ("
0 0 14 3 7 #"age-goo"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 5 #")))) "
0 0 17 3 63
#"; se falso, movimenta a snake, renova os goos e retorna o mundo"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";comer o goo goo-to-eat da lista de goos \303\251 remover o goo-to-e"
 #"at da lista goos"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";e inserir um novo goo aleatorio na nova lista de goos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eat"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #" "
0 0 14 3 10 #"goo-to-eat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fresh-goo"
0 0 24 3 3 #") ("
0 0 14 3 6 #"remove"
0 0 24 3 1 #" "
0 0 14 3 10 #"goo-to-eat"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 3 #")))"
0 0 17 3 43 #";retorna uma lista com um goo aleatorio na "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 62
#";cabe\303\247a e na cauda a lista goos sem o goo que pode ser comido"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";para crescer a snake sn basta criar uma nova snake com a mesma dire"
 #"cao"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";e com segmentos (proxima cabe\303\247a) e os segmentos anteriores"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"grow"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"snake"
0 0 24 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 2 #") "
0 0 17 3 38 #";retorna uma snake com mesma dire\303\247\303\243o"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-head"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #") ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"snake-eaten"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 4 #"))))"
0 0 17 3 41 #";insere um novo segmento na cabe\303\247a de sn"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";para movimentar a snake sn basta criar uma nova snake com a mesma d"
 #"irecao"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";e com segmentos (proxima cabe\303\247a) e os segmentos anteriores m"
 #"enos o \303\272ltimo"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"slither"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"snake"
0 0 24 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-head"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #") ("
0 0 14 3 12 #"all-but-last"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"snake-eaten"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";funcao que retira o ultimo segmento da lista de segmentos da snake"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-but-last"
0 0 24 3 1 #" "
0 0 14 3 4 #"segs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"segs"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"segs"
0 0 24 3 3 #") ("
0 0 14 3 12 #"all-but-last"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"segs"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";funcao next-head recebe uma snake sn separa sua cabe\303\247a e sua"
 #" direcao"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";depois dependo da direcao retorna a proxima posicao da cabeca"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-head"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 2 #"))"
0 0 17 3 41 #";head \303\251 o primeiro segumento da snake sn"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 2 #"))"
0 0 17 3 31 #";dir \303\251 a dire\303\247\303\243o da snake sn"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"posn-move"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #")]"
0 0 17 3 28 #";dependendo da dire\303\247\303\243o dir"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"posn-move"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 17 3 30 #";ser\303\241 retornada uma estrutura"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"posn-move"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")]"
0 0 17 3 29 #";como a pr\303\263xima posi\303\247\303\243o da"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"posn-move"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")]))"
0 0 17 3 9 #";cabe\303\247a "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";a funcao posn-move aplica a um ponto p um deslocamento em x (dx) e "
 #"em"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #";y (dy), retornando um no ponto"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"posn-move"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 2 #"dx"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 2 #"dx"
0 0 24 3 1 #")"
0 0 17 3 44 #";retorna a estrutura posn com a nova posicao"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 2 #"dy"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";a funcao age-goo controla a idade dos goos, renovando-se quando exp"
 #"irarem"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"age-goo"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"rot"
0 0 24 3 2 #" ("
0 0 14 3 5 #"renew"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 3 #")))"
0 0 17 3 68
(
 #";aplica a funcao rot, no resultado da fun\303\247\303\243o renew apl"
 #"icada a goos"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";a funcao rot aplica a funcao decay em todos os goos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"rot"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"decay"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";a funcao rot aplica a funcao decay em todos os goos"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(define (rot goos)"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";  (cond [(empty? goos) empty] ;se vazio goos parar e retornar empty"
 #" (vazio)"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";        [else (cons (decay (first goos)) (rot (rest goos)))]));caso"
 #" contr\303\241rio,"
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 82
(
 #";retorna uma lista formada com o primeiro elemento dos goos com expi"
 #"re subtra\303\255do "
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 72
(
 #";de 1 e a lista resultante de rot (recursivo) aplicado \303\240 caud"
 #"a dos goos"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";a funcao decay recebe um goo g e retorna um novo goo com expire red"
 #"uzido de 1"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"decay"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"goo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"goo-loc"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"goo-expire"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))))"
0 0 17 3 35 #";mantem o loc de g e reduz o expire"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";a funcao renew faz a renovacao da lista de goos trocando"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";os goos expirados por goos novos aleatorios, retornado uma lista de"
 #" goos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"renew"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"rotten?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 9 #"fresh-goo"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 4 #"goos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(define (renew goos)"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";  (cond [(empty? goos) empty];se a lista goos for vazia, retorna em"
 #"pty"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";        [(rotten? (first goos));se o primeiro de goos estiver expir"
 #"ado"
) 0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";         (cons (fresh-goo) (renew (rest goos)))];retorna uma lista "
 #"com o novo goo aleat\303\263rio"
) 0 0 24 29 1 #"\n"
0 0 17 3 129
(
 #";        [else                                   ;como cabe\303\247a"
 #" e cauda resultante do renew recursivo com a cauda da lista goos   "
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #";         (cons (first goos) (renew (rest goos)))]));sen\303\243o, r"
 #"etorna uma lista com o mesmo goo da cabe\303\247a de goos"
) 0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                   "
0 0 17 3 76
(
 #";e cauda resultante do renew recursivo com a cauda da lista goos    "
 #"        "
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";a funcao rotten? verifa se um goo g est\303\241 expirado (ou seja) "
 #"tem expire zero"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"rotten?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"goo-expire"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #")))"
0 0 17 3 17 #";retorna #t ou #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";funcao fresh-goo retorna um goo aleat\303\263rio com expire de valo"
 #"r EXPIRATION-TIME"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fresh-goo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"goo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMX"
0 0 24 3 3 #")))"
0 0 17 3 50 #";diminui 1 de SIZE, gera o nro aleat\303\263rio e soma 1"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMY"
0 0 24 3 4 #"))))"
0 0 17 3 57 #";isso para gerar um nro entre 1 e SIZE (retirando o zero)"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 15 #"EXPIRATION-TIME"
0 0 24 3 2 #"))"
0 0 17 3 14 #";retorna o goo"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";funcao direct-snake "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"direct-snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"dir?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 3 #") ("
0 0 14 3 16 #"world-change-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";funcao dir? retorna #t ou #f verificando se x \303\251 s\303\243o t"
 #"eclas de dire\303\247\303\243o"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dir?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")))"
0 0 17 3 26 #";retorna o resultado do or"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";funcao world-change-dir recebe c"
 #"omo argumentos o mundo w e a dire\303\247\303\243o d"
) 0 0 24 29 1 #"\n"
0 0 17 3 56
#";retornando um novo mundo onde a snake tem a dire\303\247\303\243o d"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-change-dir"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-snake"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pit-snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 17 3 50 #";determina a snake do mundo w (mundo \303\251 a picture)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 13 #"opposite-dir?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-snake"
0 0 24 3 2 #") "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 17 3 28 #";se a dire\303\247\303\243o for a oposta"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-snake"
0 0 24 3 4 #"))))"
0 0 17 3 40 #";e existirem segmentos na cauda da snake"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"stop-with"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 17 3 33 #";fim de jogo, parar com o mundo w"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 17 3 16 #";caso contr\303\241rio"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"pit"
0 0 24 3 2 #" ("
0 0 14 3 16 #"snake-change-dir"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"pit-goos"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))]))"
0 0 17 3 22 #";retorna um novo mundo"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 56
(
 #";onde a snake tem nova dire\303\247\303\243o e os goos s\303\243o ma"
 #"ntidos"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";funcao opposite-dir? retorna #t ou #f se as dire\303\247\303\265es "
 #"d1 e d2 s\303\243o opostas"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"opposite-dir?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d1"
0 0 24 3 1 #" "
0 0 14 3 2 #"d2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d1"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d2"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 2 #")]"
0 0 17 3 36 #";testa o d1 e retorna do teste do d2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d1"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d2"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 2 #")]"
0 0 17 3 37 #";veja que n\303\243o foi necess\303\241rio o uso "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d1"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #")]"
0 0 17 3 7 #";de and"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"d2"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";funcao render-pit recebe um mundo w, retornando-o em um mundo inici"
 #"al MT-SCENE"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"render-pit"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"snake+scene"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pit-snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"goo-list+scene"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pit-goos"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 8 #"MT-SCENE"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";funcao snake+scene recebe uma snake e uma cena scene, retornando"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";uma nova cena com a snake adicionada \303\240 cena scene"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"snake+scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"snake-placar-scene"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"img+scene"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"snake-eaten"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #")) "
0 0 21 3 2 #"28"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 2 #"))"
0 0 17 3 25 #"; coloca o placar (*****)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"snake-body-scene"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"img-list+scene"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-body"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 2 #") "
0 0 14 3 7 #"SEG-IMG"
0 0 24 3 1 #" "
0 0 14 3 18 #"snake-placar-scene"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #" ("
0 0 14 3 9 #"snake-dir"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"img+scene"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 1 #")"
0 0 17 3 35 #";insere a cabe\303\247a da snake na scene"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #") "
0 0 14 3 11 #"HEAD-UP-IMG"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #") "
0 0 14 3 13 #"HEAD-DOWN-IMG"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #") "
0 0 14 3 13 #"HEAD-LEFT-IMG"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #") "
0 0 14 3 14 #"HEAD-RIGHT-IMG"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 16 #"snake-body-scene"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";funcao imp-list+scene recebe uma lista de posi\303\247\303\265es po"
 #"sns, uma imagem img e uma cena scene"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";ent\303\243o retorna uma cena nova com a imagem img inserida nas po"
 #"sns na cena original scene"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"img-list+scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"posns"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"posns"
0 0 24 3 2 #") "
0 0 14 3 5 #"scene"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"img+scene"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"posns"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"img-list+scene"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"posns"
0 0 24 3 2 #") "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";funcao imp+scene coloca a imagem img na posn na cena scene"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"img+scene"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 14 3 8 #"SEG-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 14 3 8 #"SEG-SIZE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 5 #"scene"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
(
 #";fun\303\247\303\243o goo-list+scene coloca a lista de goos na cena "
 #"scene   "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"goo-list+scene"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-posns-from-goo"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"goo-loc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 18 #"get-posns-from-goo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"img-list+scene"
0 0 24 3 2 #" ("
0 0 14 3 18 #"get-posns-from-goo"
0 0 24 3 1 #" "
0 0 14 3 4 #"goos"
0 0 24 3 2 #") "
0 0 14 3 7 #"GOO-IMG"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"dead?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pit-snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 15 #"self-colliding?"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #") ("
0 0 14 3 15 #"wall-colliding?"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"render-end"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"GAME OVER\""
0 0 24 3 1 #" "
0 0 14 3 17 #"ENDGAME-TEXT-SIZE"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"render-pit"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
(
 #";fun\303\247\303\243o self-colliding? recebe uma snake e retorna #f "
 #"se"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
(
 #";a cabe\303\247a da snake pertence ao corpo da snake, caso contr\303"
 #"\241ro"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";retorna #t. A fun\303\247\303\243o member retorna uma lista em caso"
 #" de sucesso"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
(
 #"; e #f, caso contr\303\241rio. A fun\303\247\303\243o cons? verifica"
 #" se o seu "
) 0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";argumento \303\251 ou n\303\243o uma lista. Aqui poder-se-ia substi"
 #"tuir cons? "
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";pela fun\303\247\303\243o list?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"self-colliding?"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #") ("
0 0 14 3 10 #"snake-body"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
(
 #";fun\303\247\303\243o wall-colliding? recebe uma snake e retorna se "
 #"ela "
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #";colidiu ou n\303\243o com as paredes do mundo "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"wall-colliding?"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #")))"
0 0 17 3 36 #";x \303\251 a abscissa da cabe\303\247a da snake"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 24 3 1 #" "
0 0 14 3 5 #"snake"
0 0 24 3 3 #")))"
0 0 17 3 36 #";y \303\251 a ordenada da cabe\303\247a da snake"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMX"
0 0 24 3 1 #")"
0 0 17 3 35 #";se x ou y forem bordas retorna #t,"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 4 #"DIMY"
0 0 24 3 3 #")))"
0 0 17 3 28 #";caso contr\303\241rio, retorna #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
(
 #";fun\303\247\303\243o posn=? \303\251 booleana retornando #t se os p"
 #"ontos p1 e p2 "
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";apresentam mesma ordenada e abscissa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";funcao snake-head recebe uma snake sn e retorna a cabe\303\247a (pr"
 #"imeiro"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";elemento) do campo de segmentos snake-segs da estrutura snake sn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-head"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";funcao snake-body recebe uma snake sn e retorna a cauda (resto dos"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";elementos) do campo de segmentos snake-segs da estrutura snake sn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-body"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";funcao snake-tail recebe uma snake sn e retorna o \303\272ltimo seg"
 #"mento"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";do campo de segmentos snake-segs da estrutura snake sn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-tail"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
(
 #";funcao snake-change-dir rece"
 #"be uma snake sn e uma dire\303\247\303\243o sn"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
(
 #";e retora uma estrutura snake c"
 #"om os segmentos de sn e dire\303\247\303\243o d"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";e os goos comidos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"snake-change-dir"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"snake"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 14 3 10 #"snake-segs"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #") ("
0 0 14 3 11 #"snake-eaten"
0 0 24 3 1 #" "
0 0 14 3 2 #"sn"
0 0 24 3 3 #")))"
0 0 17 3 9 #"; (*****)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";gera uma lista de goos de tamanho 3 a 10"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"cria-lista-goos"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"fresh-goo"
0 0 24 3 3 #") ("
0 0 14 3 15 #"cria-lista-goos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";funcao principal"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"start-snake"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"snake"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 17 3 42 #";incremento de um contador do goos comidos"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"cria-lista-goos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 8 #"next-pit"
0 0 24 3 1 #" "
0 0 14 3 9 #"TICK-RATE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 12 #"direct-snake"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 10 #"render-pit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 5 #"dead?"
0 0 24 3 1 #" "
0 0 14 3 10 #"render-end"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0           0
